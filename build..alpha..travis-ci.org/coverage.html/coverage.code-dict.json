{"/home/travis/build/npmtest/node-npmtest-keen.io/test.js":"/* istanbul instrument in package npmtest_keen_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-keen.io/lib.npmtest_keen.io.js":"/* istanbul instrument in package npmtest_keen_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_keen_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_keen_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-keen.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-keen.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_keen_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_keen_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_keen_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_keen_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_keen_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_keen_io.__dirname + '/lib.npmtest_keen_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-keen.io/node_modules/keen.io/index.js":"var _ = require('underscore');\nvar crypto = require('crypto');\n\nvar KeenRequests = require('./lib/requests');\nvar KeenQuery = require('./lib/query');\n\nfunction KeenApi(config) {\n\tif (!config) {\n\t\tthrow new Error(\"The 'config' parameter must be specified and must be a JS object.\");\n\t}\n\tif (!config.projectId) {\n\t\tthrow new Error(\"The 'config' object must contain a 'projectId'.\");\n\t}\n\n\tthis.projectId = config.projectId;\n\tthis.writeKey = config.writeKey;\n\tthis.readKey = config.readKey;\n\tthis.masterKey = config.masterKey;\n\tthis.baseUrl = config.baseUrl || 'https://api.keen.io/';\n\tthis.apiVersion = config.apiVersion || '3.0';\n\n\tvar baseUrl = this.baseUrl;\n\tvar apiVersion = this.apiVersion;\n\tvar self = this;\n\n\t// Public Methods\n\n\tthis.projects = {\n\t\tlist: function(callback) {\n\t\t\tKeenRequests.get.call(self, self.masterKey, '/projects', null, callback);\n\t\t},\n\t\tview: function(projectId, callback) {\n\t\t\tKeenRequests.get.call(self, self.masterKey, '/projects/' + projectId, null, callback);\n\t\t}\n\t};\n\n\tthis.events = {\n\t\tlist: function(projectId, callback) {\n\t\t\tKeenRequests.get.call(self, self.masterKey, '/projects/' + projectId + '/events', null, callback);\n\t\t},\n\t\tinsert: function(projectId, events, callback) {\n\t\t\tevents = events || [];\n\t\t\tvar data = {};\n\t\t\tevents.forEach(function(event) {\n\t\t\t\tvar collection = event.collection;\n\t\t\t\tif (typeof data[collection] == 'undefined') {\n\t\t\t\t\tdata[collection] = [];\n\t\t\t\t}\n\t\t\t\tvar item = (event.data || {});\n\t\t\t\tif (typeof event.keen == 'object') {\n\t\t\t\t\titem.keen = event.keen;\n\t\t\t\t}\n\t\t\t\tdata[collection].push(item);\n\t\t\t});\n\t\t\tKeenRequests.post.call(self, self.writeKey, '/projects/' + projectId + '/events', data, callback);\n\t\t}\n\t};\n\n\tthis.properties = {\n\t\tview: function(projectId, collection, property, callback) {\n\t\t\tKeenRequests.get.call(self, self.masterKey, '/projects/' + projectId + '/events/' + collection + '/properties/' + property, null, callback);\n\t\t},\n\t\tremove: function(projectId, collection, property, callback) {\n\t\t\tKeenRequests.del.call(self, self.masterKey, '/projects/' + projectId + '/events/' + collection + '/properties/' + property, callback);\n\t\t}\n\t};\n\n\tthis.collections = {\n\t\tview: function(projectId, collection, callback) {\n\t\t\tKeenRequests.get.call(self, self.masterKey, '/projects/' + projectId + '/events/' + collection, null, callback);\n\t\t},\n\t\tremove: function(projectId, collection, callback) {\n\t\t\tKeenRequests.del.call(self, self.masterKey, '/projects/' + projectId + '/events/' + collection, callback);\n\t\t}\n\t};\n\n\tthis.addEvent = function(eventCollection, event, callback) {\n\t\tif (!this.writeKey) {\n\t\t\tvar errorMessage = \"You must specify a non-null, non-empty 'writeKey' in your 'config' object when calling keen.configure()!\";\n\t\t\tvar error = new Error(errorMessage);\n\t\t\tif (callback) {\n\t\t\t\tcallback(error);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tKeenRequests.post.call(self, this.writeKey, \"/projects/\" + this.projectId + \"/events/\" + eventCollection, event, callback);\n\t};\n\n\tthis.request = function(method, keyType, path, params, callback) {\n\t\tmethod = typeof method === 'string' && method.toLowerCase();\n\t\tkeyType += 'Key';\n\t\tcallback = callback || (typeof params === 'function') && params;\n\n\t\tif (typeof path === 'string') {\n\t\t\tpath = '/projects/' + this.projectId + '/' + path.replace(/^\\//,'');\n\t\t} else {\n\t\t\tthrow new Error('\\'path\\' must be a string.');\n\t\t}\n\n\t\tif ( ! KeenRequests.hasOwnProperty(method)) {\n\t\t\tthrow new Error('Method must be of type: GET/POST/DEL');\n\t\t}\n\n\t\tif (!this.hasOwnProperty(keyType)) {\n\t\t\tthrow new Error('Key must be of type: master/write/read');\n\t\t}\n\n\t\tif (!this[keyType]) {\n\t\t\tthrow new Error('You must specify a nun-null, non-empty \\'' + keyType + '\\' in your config object.');\n\t\t}\n\n\t\tif(method === 'post' || method === 'get') {\n\t\t\treturn KeenRequests[method].call(self, this[keyType], path, params, callback);\n\t\t}\n\n\t\tKeenRequests[method].call(self, this[keyType], path, callback);\n\t};\n\n\tthis.addEvents = function(events, callback) {\n\t\tif (!this.writeKey) {\n\t\t\tvar errorMessage = \"You must specify a non-null, non-empty 'writeKey' in your 'config' object when calling keen.configure()!\";\n\t\t\tvar error = new Error(errorMessage);\n\t\t\tif (callback) {\n\t\t\t\tcallback(error);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tKeenRequests.post.call(self, this.writeKey, \"/projects/\" + this.projectId + \"/events\", events, callback);\n\t};\n\n\tthis.queries = {\n\t\textraction: function(projectId, collection, params, callback){\n\t\t\tvar requestParams = _.extend({}, params, { 'event_collection': collection });\n\t\t\tvar path = '/projects/' + projectId + '/queries/extraction';\n\t\t\tKeenRequests.get.call(self, self.readKey, path, requestParams, callback);\n\t\t}\n\t};\n\n\tthis.run = KeenQuery.client.run;\n}\n\nfunction configure(config) {\n\treturn new KeenApi(config);\n}\n\nfunction encryptScopedKey(apiKey, options) {\n\tvar iv = crypto.randomBytes(16);\n\tvar cipher = crypto.createCipheriv(\"aes-256-cbc\", apiKey, iv);\n\tvar jsonOptions = JSON.stringify(options);\n\tvar encryptOutput1 = cipher.update(jsonOptions, \"utf8\", \"hex\");\n\tvar encryptOutput2 = cipher.final(\"hex\");\n\tvar ivPlusEncrypted = iv.toString(\"hex\") + encryptOutput1 + encryptOutput2;\n\treturn ivPlusEncrypted;\n}\n\nfunction decryptScopedKey(apiKey, scopedKey) {\n\tvar hexedIv = scopedKey.substring(0, 32);\n\tvar hexedCipherText = scopedKey.substring(32, scopedKey.length);\n\tvar iv = new Buffer(hexedIv, \"hex\");\n\tvar cipherText = new Buffer(hexedCipherText, \"hex\");\n\tvar decipher = crypto.createDecipheriv(\"aes-256-cbc\", apiKey, iv);\n\tvar decryptOutput1 = decipher.update(cipherText);\n\tvar decryptOutput2 = decipher.final();\n\tvar decrypted = decryptOutput1 + decryptOutput2;\n\treturn JSON.parse(decrypted);\n}\n\nmodule.exports = {\n\tconfigure: configure,\n\tencryptScopedKey: encryptScopedKey,\n\tdecryptScopedKey: decryptScopedKey,\n\tQuery: KeenQuery.Query\n};\n","/home/travis/build/npmtest/node-npmtest-keen.io/node_modules/keen.io/lib/requests.js":"var rest = require('superagent');\nvar crypto = require('crypto');\n\n// Handle logic of processing response, including error messages\n// The error handling should be strengthened over time to be more\n// meaningful and robust\n// ---------------------------------------------------------------\n\nfunction processResponse(err, res, callback) {\n  callback = callback || function() {};\n\n  if (res && !res.ok && !err) {\n    var is_err = res.body && res.body.error_code;\n    err = new Error(is_err ? res.body.message : 'Unknown error occurred');\n    err.code = is_err ? res.body.error_code : 'UnknownError';\n  }\n\n  if (err) return callback(err);\n  return callback(null, res.body);\n}\n\nfunction buildQueryString(params){\n  var query = [];\n  for (var key in params) {\n    if (params[key]) {\n      var value = params[key];\n      if (Object.prototype.toString.call(value) !== '[object String]') {\n        value = JSON.stringify(value);\n      }\n      value = encodeURIComponent(value);\n      query.push(key + '=' + value);\n    }\n  }\n  return \"?\" + query.join('&');\n}\n\nmodule.exports = {\n  get: function(apiKey, path, data, callback) {\n    rest\n    .get(this.baseUrl + this.apiVersion + path + buildQueryString(data))\n    .set('Authorization', apiKey)\n    .end(function(err, res) {\n      processResponse(err, res, callback);\n    });\n  },\n  post: function(apiKey, path, data, callback) {\n    rest\n    .post(this.baseUrl + this.apiVersion + path)\n    .set('Authorization', apiKey)\n    .set('Content-Type', 'application/json')\n    .send(data || {})\n    .end(function(err, res) {\n      processResponse(err, res, callback);\n    });\n  },\n  del: function(apiKey, path, callback) {\n    rest\n    .del(this.baseUrl + this.apiVersion + path)\n    .set('Authorization', apiKey)\n    .set('Content-Length', 0)\n    .end(function(err, res) {\n      processResponse(err, res, callback);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-keen.io/node_modules/keen.io/lib/query.js":"var _ = require('underscore');\nvar KeenRequests = require('./requests');\n\n/*!\n* -----------------\n* Keen IO Query JS\n* -----------------\n*/\n\nvar Keen = {};\n\n// ------------------------------\n// Keen.Request\n// ------------------------------\n\nKeen.Request = function(){\n  this.data = {};\n  this.configure.apply(this, arguments);\n}\n\nKeen.Request.prototype.configure = function(client, queries, callback){\n  this.client = client;\n  this.queries = queries;\n  this.callback = callback;\n  this.run();\n  return this;\n};\n\nKeen.Request.prototype.run = function(){\n  var self = this,\n      completions = 0,\n      response = [];\n\n  var handleResponse = function(err, res){\n    if (err && self.callback) {\n      return self.callback(err, null);\n    }\n    response[arguments[2]] = res, completions++;\n    if (completions == self.queries.length) {\n      self.data = (self.queries.length == 1) ? response[0] : response;\n      if (self.callback) self.callback(null, self.data);\n    }\n  };\n\n  _.each(self.queries, function(query, index){\n    var data, path = '/projects/' + self.client.projectId;\n    var callbackSequencer = function(err, res){\n      handleResponse(err, res, index);\n    };\n\n    if (query instanceof Keen.Query) {\n      path += query.path;\n      data = query.params || {};\n    }\n    /* TODO: Test and deploy this\n    else if (_.isString(query)) {\n      path += '/saved_queries/' + query + '/result';\n      data = { api_key: self.client.readKey };\n    }*/\n    else {\n      throw new Error('Query #' + (index+1)  +' is not valid');\n\n    }\n\n    KeenRequests.get.call(self.client, self.client.readKey, path, data, callbackSequencer);\n  });\n\n  return self;\n};\n\n\n// ------------------------------\n// Keen.Query\n// ------------------------------\n\nKeen.Query = function(){\n  this.configure.apply(this, arguments);\n};\n\nKeen.Query.prototype.configure = function(analysisType, params){\n  //if (!collection) throw new Error('Event Collection name is required');\n  var self = this;\n  self.path = '/queries/' + analysisType;\n  self.params = {};\n  self.set(params);\n  return self;\n};\n\nKeen.Query.prototype.get = function(attribute) {\n  if (this.params) {\n    return this.params[attribute] || null;\n  }\n};\n\nKeen.Query.prototype.set = function(attributes) {\n  var self = this;\n  _.each(attributes, function(v, k){\n    var key = k, value = v;\n    if (k.match(new RegExp(\"[A-Z]\"))) {\n      key = k.replace(/([A-Z])/g, function($1) { return \"_\"+$1.toLowerCase(); });\n    }\n    self.params[key] = value;\n\n    if (_.isArray(value)) {\n      _.each(value, function(dv, index){\n        if (_.isObject(dv)) {\n          _.each(dv, function(deepValue, deepKey){\n            if (deepKey.match(new RegExp(\"[A-Z]\"))) {\n              var _deepKey = deepKey.replace(/([A-Z])/g, function($1) { return \"_\"+$1.toLowerCase(); });\n              delete self.params[key][index][deepKey];\n              self.params[key][index][_deepKey] = deepValue;\n            }\n          });\n        }\n      });\n    }\n\n  });\n  return self;\n};\n\n\n// Export Methods\n// ------------------------------\nmodule.exports = {\n  client: {\n    run: function(query, callback){\n      if (!query) throw new Error('At least one query is required');\n      var queries = (_.isArray(query)) ? query : [query];\n      return new Keen.Request(this, queries, callback);\n    }\n  },\n  Query: Keen.Query\n};\n"}